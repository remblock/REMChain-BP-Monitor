#!/bin/bash

#****************************************************************************************************#
#                                        TESTCHAIN-BP-MONITOR                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# IF THE USER HAS NO ROOT PERMISSIONS THE SCRIPT WILL EXIT                                           #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION VARIABLES                                                                            #
#----------------------------------------------------------------------------------------------------#

max_queued_msg_lines="50"
log_file="/root/remnode.log"
state_file="/root/check-bp-monitor"
create_dir="/root/remblock/bp-monitor"
current_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
second_date=$(date -d $current_date +%s)
config_file="/root/remblock/bp-monitor/config"
swap_file="/root/remblock/bp-monitor/swap.alert"
oracle_file="/root/remblock/bp-monitor/oracle.alert"
temp_dir="/root/remblock/bp-monitor/bp-monitor-temp"
cron_cmd="/root/remblock/bp-monitor/testchain-bp-monitor"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

#----------------------------------------------------------------------------------------------------#
# CREATE DIRECTORY IF IT DOESN'T EXIST                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -d "$create_dir" ]
then
  mkdir -p "$create_dir"
  cp -p "$0" "$create_dir"
fi

#----------------------------------------------------------------------------------------------------#
# CREATE STATE FILE IF IT DOESN'T EXIST                                                              #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$state_file" ]
then
cat > "$state_file" << 'DOC'
on
DOC
fi

#-----------------------------------------------------------------------------------------------------
# SCHEDULE CRON FOR THE BP MONITOR SCRIPT
#-----------------------------------------------------------------------------------------------------

if ! crontab -l | grep -q "testchain-bp-monitor"
then
  (crontab -l ; echo "* * * * * $create_dir/testchain-bp-monitor >> $create_dir/${SCRIPT_LOG_FILE} 2>&1") | crontab -
fi

#****************************************************************************************************#
#                                            FUNCTIONS                                               #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO TRANSLATE THE TIME FORMAT FROM REMCLI FORMATE TO EPOCH TIME                            #
#----------------------------------------------------------------------------------------------------#

function remnodelogtime_to_date() {
  temp_date="$( echo $1 | awk -F '.' '{ print $1}' | tr '-' '/' | tr 'T' ' ')"
  echo $(date "+%s" -d "$temp_date")
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO GET YES OR NO ANSWER FROM USER                                                         #
#----------------------------------------------------------------------------------------------------#

function get_user_answer_yn(){
  while :
  do
    read -p "$1 [y/n]: " answer
    answer="$(echo $answer | tr '[:upper:]' '[:lower:]')"
    case "$answer" in
      yes|y) return 0 ;;
      no|n) return 1 ;;
      *) echo  "Invalid Answer [yes/y/no/n expected]";continue;;
    esac
  done
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO GET VALUE FROM THE CONFIG FILE AND RETURN IT WITH THE VARIABLE "global_value"          #
#----------------------------------------------------------------------------------------------------#

function get_config_value() {
  global_value=$(grep -v '^#' "$config_file" | grep "^$1=" | awk -F '=' '{print $2}')
  if [ -z "$global_value" ]
  then
    return 1
  else
    return 0
  fi
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO CHECK REMCLI GET INFO RESPONSE                                                         #
#----------------------------------------------------------------------------------------------------#

function check_remcli_response(){
  if ! timeout 10s remcli get info 2>&1 | grep server_version &>/dev/null
  then
    curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_server_name has failed to receive a response from remcli" &>/dev/null
  fi
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO CHECK WHETHER PRODUCER IS MISSING SWAP ACTION                                          #
#----------------------------------------------------------------------------------------------------#

function check_producer_swap(){
  producer_swap=$(remcli get table rem.swap rem.swap swaps -r -l 1 | grep -o "$set_account_name") 
  if [ ! -f "$swap_file" ]
  then
    if [[ ! "$producer_swap" == "$set_account_name" ]]
    then 
      curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_account_name has stopped performing swap actions." &>/dev/null
      touch $swap_file
    fi
  fi
  if [ -f "$swap_file" ]
  then
    if [[ "$producer_swap" == "$set_account_name" ]]
    then
      rm $swap_file
    fi
  fi
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO CHECK WHETHER PRODUCER IS MISSING ORACLE ACTION                                        #
#----------------------------------------------------------------------------------------------------#

function check_producer_oracle(){
  last_oracle_date=$(remcli -u https://testchain.remme.io get table rem.oracle rem.oracle pricedata -L $set_account_name -U $set_account_name | grep 'last_update' | awk '{print $2}' | tr -d '"')
  last_oracle=$(remnodelogtime_to_date "$last_oracle_date")
  if [ ! -f "$oracle_file" ]
  then
    if [[ "$second_date - $last_oracle" -ge "3900" ]]
    then
      curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_account_name has stopped performing oracle actions." &>/dev/null
      touch $oracle_file
    fi
  fi
  if [ -f "$oracle_file" ]
  then
    if [[ "$second_date - $last_oracle" -le "3900" ]]
    then
      rm $oracle_file
    fi
  fi
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO CHECK WHETHER PRODUCER IS PRODUCING BLOCKS                                             #
#----------------------------------------------------------------------------------------------------#

function check_producer_last_block(){
  last_log_block_date=$(cat -v $log_file | grep "signed by $set_account_name" | sed -n '$p' | awk '{print $2}')
  last_remcli_block_date=$(remcli -u https://testchain.remme.io get table rem rem producers -L $set_account_name -U $set_account_name | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
  active=$(remcli -u https://testchain.remme.io get table rem rem producers -L $set_account_name -U $set_account_name | grep 'is_active' | awk '{print $2}' | tr -d '"' | tr -d ',')
  if [ -z "$active" ]
  then
    active=$(remcli get table rem rem producers -L $set_account_name -U $set_account_name | grep 'is_active' | awk '{print $2}' | tr -d '"' | tr -d ',')
  fi
  if [ -z "$last_block_date" ]
  then
    last_remcli_block_date=$(remcli get table rem rem producers -L $set_account_name -U $set_account_name | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
  fi
  last_block=$(remnodelogtime_to_date "$last_remcli_block_date")
  last_log_block=$(remnodelogtime_to_date "$last_log_block_date")
  current_minutes=$(( ($second_date - $last_block) / 60 ))
  last_block_in_seconds=$(( (set_last_produce_minutes * 60) - 60 ))
  if [[ "$second_date - $last_block" -ge "$last_block_in_seconds" ]]
  then
    if [[ "$second_date - $last_log_block" -ge "$last_block_in_seconds" ]]
    then
      if [ "$active" -eq "1" ]
      then
        curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_account_name has stopped producing blocks for $current_minutes minutes." &>/dev/null
      fi
    fi
  fi
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION TO CHECK RAM AND DISK SPACE                                                               #
#----------------------------------------------------------------------------------------------------#

function check_ram_and_disk(){
  ram_used_percertage="$(free | grep Mem | awk '{print $3/$2 * 100.0}' | awk -F '.' '{print $1}')"
  max_ram="$(echo $ram_usage_threshold | tr -d '%' )"
  disk_used_percertage="$(df -h | grep -w '/' | awk '{print $5}' | tr -d '%')"
  max_disk="$(echo $disk_space_threshold | tr -d '%' )"
  if (( ram_used_percertage >= max_ram ))
  then
    curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_server_name ram usage is over the specified threshold amount." &>/dev/null
  fi
  if (( disk_used_percertage >= max_disk ))
  then
    curl -s -X POST https://api.telegram.org/bot$set_telegram_token/sendMessage -d chat_id=$set_telegram_chatid -d text="$set_server_name disk usage is over the specified threshold amount." &>/dev/null  
  fi
}

#****************************************************************************************************#
#                                          CONFIG VARIABLES                                          #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# CREATE CONFIG FILE IF IT DOESN'T EXIST                                                             #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
  echo "#Configuration file for the unregprod script" > "$config_file"
  echo "#Make the entries as variable=value" >> "$config_file"
  echo " " >> "$config_file"
  echo "check_remcli=" >> "$config_file"
  echo "check_server=" >> "$config_file"
  echo "check_producer=" >> "$config_file"
  echo "check_telegram=" >> "$config_file"
  echo "set_server_name=" >> "$config_file"
  echo "set_account_name=" >> "$config_file"
  echo "set_telegram_token=" >> "$config_file"
  echo "set_telegram_chatid=" >> "$config_file"
  echo "ram_usage_threshold=" >> "$config_file"
  echo "disk_space_threshold=" >> "$config_file"
  echo "warning_alert_threshold=" >> "$config_file"
  echo "set_last_produce_minutes=" >> "$config_file"
  echo " " >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# GET CONFIGURATION FROM THE CONFIG FILE                                                             #
#----------------------------------------------------------------------------------------------------#

check_remcli="$(grep -v '^#' "$config_file" | grep '^check_remcli=' | awk -F '=' '{print $2}')"
check_server="$(grep -v '^#' "$config_file" | grep '^check_server=' | awk -F '=' '{print $2}')"
check_producer="$(grep -v '^#' "$config_file" | grep '^check_producer=' | awk -F '=' '{print $2}')"
check_telegram="$(grep -v '^#' "$config_file" | grep '^check_telegram=' | awk -F '=' '{print $2}')"
set_server_name="$(grep -v '^#' "$config_file" | grep '^set_server_name=' | awk -F '=' '{print $2}')"
set_account_name="$(grep -v '^#' "$config_file" | grep '^set_account_name=' | awk -F '=' '{print $2}')"
set_telegram_token="$(grep -v '^#' "$config_file" | grep '^ set_telegram_token=' | awk -F '=' '{print $2}')"
set_telegram_chatid="$(grep -v '^#' "$config_file" | grep '^set_telegram_chatid=' | awk -F '=' '{print $2}')"
ram_usage_threshold="$(grep -v '^#' "$config_file" | grep '^ram_usage_threshold=' | awk -F '=' '{print $2}')"
disk_space_threshold="$(grep -v '^#' "$config_file" | grep '^disk_space_threshold=' | awk -F '=' '{print $2}')"
warning_alert_threshold="$(grep -v '^#' "$config_file" | grep '^warning_alert_threshold=' | awk -F '=' '{print $2}')"
set_last_produce_minutes="$(grep -v '^#' "$config_file" | grep '^set_last_produce_minutes=' | awk -F '=' '{print $2}')"

#****************************************************************************************************#
#                                       GETTING USER VARIABLES                                       #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# CHECK FOR SERVER NAME IF SET IN THE CONFIG FILE                                                    #
#----------------------------------------------------------------------------------------------------#

if get_config_value set_server_name
then
  set_server_name="$global_value"
else
  if grep "^set_server_name" "$config_file" > /dev/null 2>&1
  then
    echo ""
    read -p "ENTER YOUR SERVER NAME?: " -e set_server_name
    sed -i "s/set_server_name=/set_server_name=$set_server_name/g" "$config_file"
  else
    set_server_name="Server 1"
    sed -i "s/set_server_name=/set_server_name=$set_server_name/g" "$config_file"
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR PRODUCER NAME IF SET IN THE CONFIG FILE                                                  #
#----------------------------------------------------------------------------------------------------#

if get_config_value set_account_name
then
  set_account_name="$global_value"
else
  if grep "^set_account_name" "$config_file" > /dev/null 2>&1
  then
    set_account_name=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
    sed -i "s/set_account_name=/set_account_name=$set_account_name/g" "$config_file"
  fi
fi
if grep "^set_account_name" "$config_file" > /dev/null 2>&1
then
  if [ -z "$set_account_name" ]
  then
    echo ""
    read -p "ENTER YOUR PRODUCER NAME: " -e set_account_name
    sed -i "s/set_account_name=/set_account_name=$set_account_name/g" "$config_file"
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR REMCLI GET INFO VARIABLE IF SET IN THE CONFIG FILE                                       #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_remcli
then
  check_remcli="$global_value"
else
  if grep "^check_remcli" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "CHECK FOR REMCLI RESPONSE"
    then
      check_remcli=true
      sed -i "s/check_remcli=/check_remcli=$check_remcli/g" "$config_file"
    else
      check_remcli=false
      sed -i "s/check_remcli=/check_remcli=$check_remcli/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR SERVER CONDITION VARIABLE IF SET IN THE CONFIG FILE                                      #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_server
then
  check_server="$global_value"
else
  if grep "^check_server" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "CHECK SERVER RAM AND DISK SPACE"
    then
      check_server=true
      sed -i "s/check_server=/check_server=$check_server/g" "$config_file"
    else
      check_server=false
      sed -i "s/check_server=/check_server=$check_server/g" "$config_file"
    fi
  fi
fi
if $check_server
then
  if get_config_value ram_usage_threshold
  then
    ram_usage_threshold="$global_value"
  else
    if grep "^ram_usage_threshold" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR RAM THRESHOLD PERCENTAGE: " -e ram_usage_threshold
      sed -i "s/ram_usage_threshold=/ram_usage_threshold=$ram_usage_threshold/g" "$config_file"
    fi
  fi
  if get_config_value disk_space_threshold
  then
    disk_space_threshold="$global_value"
  else
    if grep "^disk_space_threshold" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR DISK THRESHOLD PERCENTAGE: " -e disk_space_threshold
      sed -i "s/disk_space_threshold=/disk_space_threshold=$disk_space_threshold/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR PRODUCER VARIABLE IF SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_producer
then
  check_producer="$global_value"
else
  if grep "^check_producer" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "MONITOR ${set_account_name^^} FOR LAST BLOCK, SWAP AND ORACLE ACTIONS"
    then
      check_producer=true
      sed -i "s/check_producer=/check_producer=$check_producer/g" "$config_file"
    else
      check_producer=false
      sed -i "s/check_producer=/check_producer=$check_producer/g" "$config_file"
    fi
  fi
fi
if $check_producer
then
  if get_config_value set_last_produce_minutes
  then
    set_last_produce_minutes="$global_value"
  else
    if grep "^set_last_produce_minutes" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "MINTUES TO MONITOR IF ${set_account_name^^} IS NOT PRODUCING?: " -e set_last_produce_minutes
      sed -i "s/set_last_produce_minutes=/set_last_produce_minutes=$set_last_produce_minutes/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR TELEGRAM VARIABLE IF SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_telegram
then
  check_telegram="$global_value"
else
  if grep "^check_telegram" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "ENABLE TELEGRAM NOTIFICATIONS"
    then
      check_telegram=true
      sed -i "s/check_telegram=/check_telegram=$check_telegram/g" "$config_file"
    else
      check_telegram=false
      sed -i "s/check_telegram=/check_telegram=$check_telegram/g" "$config_file"
    fi
  fi
fi
if $check_telegram
then
  if get_config_value set_telegram_token
  then
    set_telegram_token="$global_value"
  else
    if grep "^set_telegram_token" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM TOKEN API: " -e set_telegram_token
      sed -i "s/set_telegram_token=/set_telegram_token=$set_telegram_token/g" "$config_file"
    fi
  fi
  if get_config_value set_telegram_chatid
  then
    set_telegram_chatid="$global_value"
  else
    if grep "^set_telegram_chatid" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM CHAT ID: " -e set_telegram_chatid
      sed -i "s/set_telegram_chatid=/set_telegram_chatid=$set_telegram_chatid/g" "$config_file"
    fi
  fi
fi
if $check_telegram
then
  if get_config_value warning_alert_threshold
  then
    warning_alert_threshold="$global_value"
  else
    if grep "^warning_alert_threshold" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR ALERT THRESHOLD MINUTE: " -e warning_alert_threshold
      sed -i "s/warning_alert_threshold=/warning_alert_threshold=$warning_alert_threshold/g" "$config_file"
      echo ""
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# GET VARIABLES FROM THE CONFIG SOURCE                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -z "$warning_alert_threshold" ]
then
  crontab -u root -l | grep -v 'testchain-bp-monitor'  | crontab -u root -
 (crontab -u root -l ; echo "*/$warning_alert_threshold * * * * $cron_cmd") | crontab -u root -
fi

#****************************************************************************************************#
#                                     MAIN PART OF THE SCRIPT                                        #
#****************************************************************************************************#

switch=$(cat "$state_file")

echo "======================================================================================="
echo "BP-Monitor script is '$switch', to disable script set file '$state_file' to 'off'"
echo "======================================================================================="
echo ""

case "$switch" in

on|On|ON) if [ "$(echo $check_remcli | tr '[:upper:]' '[:lower:]' )" == "true" ]
          then
            check_remcli_response
          fi
          if [ "$(echo $check_server | tr '[:upper:]' '[:lower:]' )" == "true" ]
          then
            check_ram_and_disk
          fi
          if [ "$(echo $check_producer | tr '[:upper:]' '[:lower:]' )" == "true" ]
          then
            check_producer_swap
            check_producer_oracle 
            check_producer_last_block
          fi
        ;;

off|Off|OFF) exit
             ;;

*) exit
   ;;

esac
