#!/bin/bash

#****************************************************************************************************#
#                                        TESTCHAIN-BP-MONITOR                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# IF THE USER HAS NO ROOT PERMISSIONS THE SCRIPT WILL EXIT                                           #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION VARIABLES                                                                            #
#----------------------------------------------------------------------------------------------------#

now_epoch="$(date +%s)"
state_file="/root/check-bp-monitor"
create_dir="/root/remblock/bp-monitor"
config_file="/root/remblock/bp-monitor/config"
cron_cmd="/root/remblock/bp-monitor/testchain-bp-monitor"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

#----------------------------------------------------------------------------------------------------#
# REMOVE EXISTING CRONTAB LINE IF IT EXIST WHILE CONFIG DOESN'T                                      #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
crontab -u root -l | grep -v ^# | grep -v "$cron_cmd" | crontab -u root -
fi

#----------------------------------------------------------------------------------------------------#
# CREATE DIRECTORY IF IT DOESN'T EXIST                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -d "$create_dir" ]
then
  mkdir -p "$create_dir"
  cp -p "$0" "$create_dir"
fi

#----------------------------------------------------------------------------------------------------#
# GET YES OR NO ANSWER FROM USER                                                                     #
#----------------------------------------------------------------------------------------------------#

function get_user_answer_yn(){
  while :
  do
    read -p "$1 [y/n]: " answer
    answer="$(echo $answer | tr '[:upper:]' '[:lower:]')"
    case "$answer" in
      yes|y) return 0 ;;
      no|n) return 1 ;;
      *) echo  "Invalid Answer [yes/y/no/n expected]";continue;;
    esac
  done
}

#----------------------------------------------------------------------------------------------------#
# GET VALUE FROM THE CONFIG FILE, RETURN IT WITH THE VARIABLE "global_value"                         #
#----------------------------------------------------------------------------------------------------#

function get_config_value() {
  global_value=$(grep -v '^#' "$config_file" | grep "^$1=" | awk -F '=' '{print $2}')
  if [ -z "$global_value" ]
  then
    return 1
  else
    return 0
  fi
}

#----------------------------------------------------------------------------------------------------#
# CREATE CONFIG FILE IF IT DOESN'T EXIST                                                             #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
  echo "#Configuration file for the unregprod script" > "$config_file"
  echo "#Make the entries as variable=value" >> "$config_file"
  echo " " >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# CREATES THE CHECK BP MONITOR SCRIPT IF IT DOESN'T EXIST                                            #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$state_file" ]
then
cat > "$state_file" << 'DOC'
on
DOC
fi

#****************************************************************************************************#
#                                   GETTING POSSIBLE MISSING VALUE                                   #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# GET PRODUCER NAME IF NOT ALREADY ON THE CONFIG FILE                                                #
#----------------------------------------------------------------------------------------------------#

if get_config_value accountname
then
  accountname="$global_value"
else
  if ! grep "^accountname" "$config_file" > /dev/null 2>&1
  then
    accountname=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
    printf -- "%s\n" "accountname=$accountname" >> "$config_file"
  else
    accountname=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
    sed -i "s/accountname=/accountname=$accountname/g" "$config_file"
  fi
fi
if grep "^accountname" "$config_file" > /dev/null 2>&1
then
  if [ -z "$accountname" ]
  then
    echo ""
    read -p "ENTER YOUR PRODUCER NAME: " -e accountname
    sed -i "s/accountname=/accountname=$accountname/g" "$config_file"
  fi
fi

#----------------------------------------------------------------------------------------------------#
# GET TELEGRAM DATA IF NOT ALREADY ON THE CONFIG FILE                                                #
#----------------------------------------------------------------------------------------------------#

if get_config_value telegram_enabled
then
  telegram_enabled="$global_value"
elif ! grep "^telegram_enabled" "$config_file" > /dev/null 2>&1
then
  echo ""
  if get_user_answer_yn "ENABLE TELEGRAM NOTIFICATIONS"
  then
    telegram_enabled=true
    printf -- "%s\n" "telegram_enabled=$telegram_enabled" >> "$config_file"
  else
    telegram_enabled=false
    printf -- "%s\n" "telegram_enabled=$telegram_enabled" >> "$config_file"
  fi
fi
if $telegram_enabled
then
  if get_config_value telegram_token
  then
    telegram_token="$global_value"
  else
    if ! grep "^telegram_token" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM TOKEN API: " -e telegram_token
      printf -- "%s\n" "telegram_token=$telegram_token" >> "$config_file"
    else
      sed -i "s/telegram_token=/telegram_token=$telegram_token/g" "$config_file"
    fi
  fi
  if get_config_value telegram_chatid
  then
    telegram_chatid="$global_value"
  else
    if ! grep "^telegram_chatid" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM CHAT ID: " -e telegram_chatid
      printf -- "%s\n" "telegram_chatid=$telegram_chatid" >> "$config_file"
    else
      sed -i "s/telegram_token=/telegram_token=$telegram_token/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# USER BLOCK MINUTE VALUE IF NOT SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_last_block_minutes
then
  check_last_block_minutes="$global_value"
else
  if ! grep "^check_last_block_minutes" "$config_file" > /dev/null 2>&1
  then
    echo ""
    read -p "ENTER MINTUES TO MONITOR IF YOU'RE NOT PRODUCING?: " -e check_last_block_minutes
    echo ""
    printf -- "%s\n" "check_last_block_minutes=$check_last_block_minutes" >> "$config_file"
  else
    check_last_block_minutes=6
    sed -i "s/check_last_block_minutes=/check_last_block_minutes=$check_last_block_minutes/g" "$config_file"
  fi
fi

#****************************************************************************************************#
#                                       FUNCTIONS DEFINITIONS                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# INSTALL CRONTAB LINE IF IT DOESN'T EXIST                                                           #
#----------------------------------------------------------------------------------------------------#

if [ ! -z "$cron_cmd" ] && ! crontab -u root -l | grep -v '^ *#' | grep "$cron_cmd" &>/dev/null
then
  (crontab -u root -l ; echo "*/1 * * * * $cron_cmd") | crontab -u root -
fi

#----------------------------------------------------------------------------------------------------#
# TRANSLATE THE TIME FORMAT FROM REMCLI FORMATE TO EPOCH TIME                                        #
#----------------------------------------------------------------------------------------------------#

function remnodelogtime_to_epoch() {
  temp_date="$( echo $1 | awk -F '.' '{ print $1}' | tr '-' '/' | tr 'T' ' ')"
  echo $(date "+%s" -d "$temp_date")
}

#----------------------------------------------------------------------------------------------------#
# MAIN PART OF THE SCRIPT                                                                            #
#----------------------------------------------------------------------------------------------------#

switch=$(cat "$state_file")

echo "======================================================================================="
echo "BP-Monitor script is '$switch', to disable script set file '$state_file' to 'off'"
echo "======================================================================================="
echo ""

case "$switch" in

on|On|ON) last_block_date=$(remcli -u https://testchain.remme.io get table rem rem producers -L $accountname -U $accountname | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
          last_block_epoch=$(remnodelogtime_to_epoch "$last_block_date")
          current_minutes=$(( ($now_epoch - $last_block_epoch) / 60 ))
          config_minutes_in_seconds=$(( (check_last_block_minutes * 60) ))
          while (( ($now_epoch - $last_block_epoch) >= $config_minutes_in_seconds ))
          do

                telegram_message="$accountname has stopped producing blocks for $current_minutes minutes"
                curl -s -X POST https://api.telegram.org/bot$telegram_token/sendMessage -d chat_id=$telegram_chatid -d text="$telegram_message" &>/dev/null
                sleep $check_last_block_minutes

          done
        ;;

off|Off|OFF) exit
             ;;

*) exit
   ;;

esac
