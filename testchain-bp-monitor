#!/bin/bash

#****************************************************************************************************#
#                                        TESTCHAIN-BP-MONITOR                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# IF THE USER HAS NO ROOT PERMISSIONS THE SCRIPT WILL EXIT                                           #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION VARIABLES                                                                            #
#----------------------------------------------------------------------------------------------------#

second_date="$(date +%s)"
current_date="$(date +%d-%m-%Y)"
max_queued_msg_lines="50"
log_file="/root/remnode.log"
state_file="/root/check-bp-monitor"
create_dir="/root/remblock/bp-monitor"
config_file="/root/remblock/bp-monitor/config"
temp_dir="/root/remblock/bp-monitor/bp-monitor-temp"
cron_cmd="/root/remblock/bp-monitor/testchain-bp-monitor"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

#----------------------------------------------------------------------------------------------------#
# CREATE DIRECTORY IF IT DOESN'T EXIST                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -d "$create_dir" ]
then
  mkdir -p "$create_dir"
  cp -p "$0" "$create_dir"
fi

#----------------------------------------------------------------------------------------------------#
# GET YES OR NO ANSWER FROM USER                                                                     #
#----------------------------------------------------------------------------------------------------#

function get_user_answer_yn(){
  while :
  do
    read -p "$1 [y/n]: " answer
    answer="$(echo $answer | tr '[:upper:]' '[:lower:]')"
    case "$answer" in
      yes|y) return 0 ;;
      no|n) return 1 ;;
      *) echo  "Invalid Answer [yes/y/no/n expected]";continue;;
    esac
  done
}

#----------------------------------------------------------------------------------------------------#
# GET VALUE FROM THE CONFIG FILE AND RETURN IT WITH THE VARIABLE "global_value"                      #
#----------------------------------------------------------------------------------------------------#

function get_config_value() {
  global_value=$(grep -v '^#' "$config_file" | grep "^$1=" | awk -F '=' '{print $2}')
  if [ -z "$global_value" ]
  then
    return 1
  else
    return 0
  fi
}

#----------------------------------------------------------------------------------------------------#
# CREATE CONFIG FILE IF IT DOESN'T EXIST                                                             #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
  echo "#Configuration file for the unregprod script" > "$config_file"
  echo "#Make the entries as variable=value" >> "$config_file"
  echo " " >> "$config_file"
  echo "check_info=" >> "$config_file"
  echo "check_server=" >> "$config_file"
  echo "check_producer=" >> "$config_file"
  echo "check_telegram=" >> "$config_file"
  echo "set_server_name=" >> "$config_file"
  echo "set_account_name=" >> "$config_file"
  echo "set_telegram_token=" >> "$config_file"
  echo "set_telegram_chatid=" >> "$config_file"
  echo "ram_usage_threshold=" >> "$config_file"
  echo "disk_space_threshold=" >> "$config_file"
  echo "last_produce_minutes=" >> "$config_file"
  echo "warning_alert_threshold=" >> "$config_file"
  echo " " >> "$config_file"
fi

#-----------------------------------------------------------------------------------------------------
# GET CONFIGURATION FROM THE CONFIG FILE
#-----------------------------------------------------------------------------------------------------

check_info="$(grep -v '^#' "$config_file" | grep '^check_info=' | awk -F '=' '{print $2}')"
check_server="$(grep -v '^#' "$config_file" | grep '^check_server=' | awk -F '=' '{print $2}')"
check_producer="$(grep -v '^#' "$config_file" | grep '^check_producer=' | awk -F '=' '{print $2}')"
alert_telegram="$(grep -v '^#' "$config_file" | grep '^alert_telegram=' | awk -F '=' '{print $2}')"
set_server_name="$(grep -v '^#' "$config_file" | grep '^set_server_name=' | awk -F '=' '{print $2}')"
set_account_name="$(grep -v '^#' "$config_file" | grep '^set_account_name=' | awk -F '=' '{print $2}')"
set_telegram_token="$(grep -v '^#' "$config_file" | grep '^ set_telegram_token=' | awk -F '=' '{print $2}')"
set_telegram_chatid="$(grep -v '^#' "$config_file" | grep '^set_telegram_chatid=' | awk -F '=' '{print $2}')"
ram_usage_threshold="$(grep -v '^#' "$config_file" | grep '^ram_usage_threshold=' | awk -F '=' '{print $2}')"
disk_space_threshold="$(grep -v '^#' "$config_file" | grep '^disk_space_threshold=' | awk -F '=' '{print $2}')"
last_produce_minutes="$(grep -v '^#' "$config_file" | grep '^last_produce_minutes=' | awk -F '=' '{print $2}')"
warning_alert_threshold="$(grep -v '^#' "$config_file" | grep '^warning_alert_threshold=' | awk -F '=' '{print $2}')"

#----------------------------------------------------------------------------------------------------#
# CREATES THE CHECK BP MONITOR SCRIPT IF IT DOESN'T EXIST                                            #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$state_file" ]
then
cat > "$state_file" << 'DOC'
on
DOC
fi

#****************************************************************************************************#
#                                   GETTING POSSIBLE MISSING VALUE                                   #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# CHECK FOR SERVER NAME IF SET IN THE CONFIG FILE                                                    #
#----------------------------------------------------------------------------------------------------#

if get_config_value set_server_name
then
  set_server_name="$global_value"
else
  if grep "^set_server_name" "$config_file" > /dev/null 2>&1
  then
    echo ""
    read -p "ENTER YOUR SERVER NAME?: " -e set_server_name
    sed -i "s/set_server_name=/set_server_name=$set_server_name/g" "$config_file"
  else
    set_server_name=Server 1
    sed -i "s/set_server_name=/set_server_name=$set_server_name/g" "$config_file"
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR PRODUCER NAME IF SET IN THE CONFIG FILE                                                  #
#----------------------------------------------------------------------------------------------------#

if get_config_value set_account_name
then
  set_account_name="$global_value"
else
  if grep "^set_account_name" "$config_file" > /dev/null 2>&1
  then
    set_account_name=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
    sed -i "s/set_account_name=/set_account_name=$set_account_name/g" "$config_file"
  fi
fi
if grep "^set_account_name" "$config_file" > /dev/null 2>&1
then
  if [ -z "$set_account_name" ]
  then
    echo ""
    read -p "ENTER YOUR PRODUCER NAME: " -e set_account_name
    sed -i "s/set_account_name=/set_account_name=$set_account_name/g" "$config_file"
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR REMCLI GET INFO VARIABLE IF SET IN THE CONFIG FILE                                       #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_info
then
  check_info="$global_value"
else
  if grep "^check_info" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "ENABLE CHECK FOR REMCLI GET INFO"
    then
      check_info=true
      sed -i "s/check_info=/check_info=$check_info/g" "$config_file"
    else
      check_info=false
      sed -i "s/check_info=/check_info=$check_info/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR SERVER CONDITION VARIABLE IF SET IN THE CONFIG FILE                                      #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_server
then
  check_server="$global_value"
else
  if grep "^check_server" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "ENABLE CHECK FOR SERVER CONDITION"
    then
      check_server=true
      sed -i "s/check_server=/check_server=$check_server/g" "$config_file"
    else
      check_server=false
      sed -i "s/check_server=/check_server=$check_server/g" "$config_file"
    fi
  fi
fi
if $check_server
then
  if get_config_value ram_usage_threshold
  then
    ram_usage_threshold="$global_value"
  else
    if grep "^ram_usage_threshold" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR RAM THRESHOLD PERCENTAGE: " -e ram_usage_threshold
      sed -i "s/ram_usage_threshold=/ram_usage_threshold=$ram_usage_threshold/g" "$config_file"
    fi
  fi
  if get_config_value disk_space_threshold
  then
    disk_space_threshold="$global_value"
  else
    if grep "^disk_space_threshold" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR DISK THRESHOLD PERCENTAGE: " -e disk_space_threshold
      sed -i "s/disk_space_threshold=/disk_space_threshold=$disk_space_threshold/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR PRODUCER VARIABLE IF SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_producer
then
  check_producer="$global_value"
else
  if grep "^check_producer" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "ENABLE CHECK FOR"
    then
      check_producer=true
      sed -i "s/check_producer=/check_producer=$check_producer/g" "$config_file"
    else
      check_producer=false
      sed -i "s/check_producer=/check_producer=$check_producer/g" "$config_file"
    fi
  fi
fi
if $check_producer
then
  if get_config_value last_produce_minutes
  then
    last_produce_minutes="$global_value"
  else
    if grep "^last_produce_minutes" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER MINTUES TO MONITOR IF YOU'RE NOT PRODUCING?: " -e last_produce_minutes
      echo ""
      sed -i "s/last_produce_minutes=/last_produce_minutes=$last_produce_minutes/g" "$config_file"
    fi
  fi
fi

#----------------------------------------------------------------------------------------------------#
# CHECK FOR TELEGRAM VARIABLE IF SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value alert_telegram
then
  alert_telegram="$global_value"
else
  if grep "^alert_telegram" "$config_file" > /dev/null 2>&1
  then
    echo ""
    if get_user_answer_yn "ENABLE TELEGRAM NOTIFICATIONS"
    then
      alert_telegram=true
      sed -i "s/alert_telegram=/alert_telegram=$alert_telegram/g" "$config_file"
    else
      alert_telegram=false
      sed -i "s/alert_telegram=/alert_telegram=$alert_telegram/g" "$config_file"
    fi
  fi
fi
if $alert_telegram
then
  if get_config_value set_telegram_token
  then
    set_telegram_token="$global_value"
  else
    if grep "^set_telegram_token" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM TOKEN API: " -e set_telegram_token
      sed -i "s/set_telegram_token=/set_telegram_token=$set_telegram_token/g" "$config_file"
    fi
  fi
  if get_config_value set_telegram_chatid
  then
    set_telegram_chatid="$global_value"
  else
    if grep "^set_telegram_chatid" "$config_file" > /dev/null 2>&1
    then
      echo ""
      read -p "ENTER YOUR TELEGRAM CHAT ID: " -e set_telegram_chatid
      sed -i "s/set_telegram_chatid=/set_telegram_chatid=$set_telegram_chatid/g" "$config_file"
    fi
  fi
fi

#****************************************************************************************************#
#                                       FUNCTIONS DEFINITIONS                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# GET VARIABLES FROM THE CONFIG SOURCE                                                               #
#----------------------------------------------------------------------------------------------------#

source "/root/remblock/autobot/config"

#Install and update crontab line
if [ ! -z "$warning_alert_threshold" ]
then
  #Fix crontab to match time in warning_alert_threshold
  #Remove previous line of cron
  crontab -u root -l | grep -v 'bpmonitor.sh'  | crontab -u root -
  #Add new line that matches desired interval time
 (crontab -u root -l ; echo "*/$warning_alert_threshold * * * * $cron_cmd") | crontab -u root -
fi

#----------------------------------------------------------------------------------------------------#
# REMOVE OLD LINES THAT ONLY CHANGE IN MINUTES DISPLAYED                                             #
#----------------------------------------------------------------------------------------------------#

function remove_lines_repeated_time(){
  sed -i "/^$1/d" "$temp_dir/msg_queue.txt"
}

function remove_empty_lines(){
  sed -i '/^$/{N;/^\n$/d;}' "$temp_dir/msg_queue.txt"
  #if the first line is empty, delete it
  if ! [[ "$(head -1 $temp_dir/msg_queue.txt)" =~ [a-zA-Z0-9] ]]
  then
    sed -i '1d' "$temp_dir/msg_queue.txt"
  fi
}

function send_telegram_messages(){
  if [ ! -z "$telegram_token" ] && [ ! -z "$telegram_chatid" ]
  then
    remove_empty_lines
    curl -s -X POST https://api.telegram.org/bot$telegram_token/sendMessage -d chat_id=$telegram_chatid -d text="$(echo -e "BP Warning Alert\n--------------------------------------";cat $temp_dir/msg_queue.txt)" &>/dev/null
    > $temp_dir/msg_queue.txt
    echo $second_date > "$temp_dir/last_send_message.txt"
  fi
}

function check_remcli_info(){
  if ! timeout 10s remcli get info 2>&1 | grep server_version &>/dev/null
  then
    add_message_to_queue "$servername failed to receive a response from \"remcli get info\""
  fi
}

function check_produce_minutes(){
  last_block_date=$(remcli -u https://testchain.remme.io get table rem rem producers -L $accountname -U $accountname | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
  last_block=$(remnodelogtime_to_date "$last_block_date")
  current_minutes=$(( ($second_date - $last_block) / 60 ))
  config_minutes_in_seconds=$(( (check_last_block_minutes * 60) ))
  if (( ($second_date - $last_block) >= $config_minutes_in_seconds ))
  then
    add_message_to_queue "$accountname has stopped producing blocks for $current_minutes minutes"
  fi
}

function check_disk_and_ram(){
  ram_used_percertage="$(free | grep Mem | awk '{print $3/$2 * 100.0}' | awk -F '.' '{print $1}')"
  max_ram="$(echo $ram_usage_threshold | tr -d '%' )"
  disk_used_percertage="$(df -h | grep -w '/' | awk '{print $5}' | tr -d '%')"
  max_disk="$(echo $disk_space_threshold | tr -d '%' )"
  if (( ram_used_percertage >= max_ram ))
  then
    add_message_to_queue "$servername ram usage is over the specified threshold amount."
  fi
  if (( disk_used_percertage >= max_disk ))
  then
    add_message_to_queue "$servername disk usage is over the specified threshold amount."
  fi
}

function send_warnings(){
  if [ ! -f "$temp_dir/last_send_message.txt" ]
  then
    echo $second_date > "$temp_dir/last_send_message.txt"
  else
    config_minutes_in_seconds="$((bpm_warning_alert_threshold * 60))"
    last_msg=$(cat "$temp_dir/last_send_message.txt")
    if (( (second_date - last_msg) >= config_minutes_in_seconds )) && (( $(wc -l "$temp_dir/msg_queue.txt" | awk '{print $1}') > 1 ))
    then
      send_telegram_messages
    fi
  fi
}

#----------------------------------------------------------------------------------------------------#
# TRANSLATE THE TIME FORMAT FROM REMCLI FORMATE TO EPOCH TIME                                        #
#----------------------------------------------------------------------------------------------------#

function remnodelogtime_to_date() {
  temp_date="$( echo $1 | awk -F '.' '{ print $1}' | tr '-' '/' | tr 'T' ' ')"
  echo $(date "+%s" -d "$temp_date")
}

#----------------------------------------------------------------------------------------------------#
# MAIN PART OF THE SCRIPT                                                                            #
#----------------------------------------------------------------------------------------------------#

switch=$(cat "$state_file")
status=`ps -efww | grep -w "testchain-bp-monitor" | grep -v grep | grep -v $$ | awk '{ print $2 }'`

echo "======================================================================================="
echo "BP-Monitor script is '$switch', to disable script set file '$state_file' to 'off'"
echo "======================================================================================="
echo ""

case "$switch" in

on|On|ON) if [ -z "$status" ] 
          then
            if [ "$(echo $check_info | tr '[:upper:]' '[:lower:]' )" == "true" ]
            then
              check_remcli_info
            fi
            if [ "$(echo $check_server | tr '[:upper:]' '[:lower:]' )" == "true" ]
            then
              check_disk_and_ram
            fi
            if [ "$(echo $check_producer | tr '[:upper:]' '[:lower:]' )" == "true" ]
            then
              check_produce_minutes
            fi
            send_warnings
          fi
        ;;

off|Off|OFF) exit
             ;;

*) exit
   ;;

esac
