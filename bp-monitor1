#!/bin/bash

#****************************************************************************************************#
#                                        REMCHAIN-BP-MONITOR                                         #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# IF THE USER HAS NO ROOT PERMISSIONS THE SCRIPT WILL EXIT                                           #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION VARIABLES                                                                            #
#----------------------------------------------------------------------------------------------------#

now_epoch="$(date +%s)"
create_dir="/root/remblock/bp-monitor"
config_file="/root/remblock/bp-monitor/config"
cron_cmd="/root/remblock/bp-monitor/bp-monitor"
bp_monitor_script_path="/root/remblock/bp-monitor/bp-monitor"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

#----------------------------------------------------------------------------------------------------#
# CREATE DIRECTORY IF IT DOESN'T EXIST                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -d "$create_dir" ]
then
  mkdir -p "$create_dir"
  cp -p "$0" "$create_dir"
fi

#----------------------------------------------------------------------------------------------------#
# CREATE CONFIG FILE IF IT DOESN'T EXIST                                                             #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
  echo "#Configuration file for the bp-monitor script" > "$config_file"
  echo "#Make the entries as variable=value" >> "$config_file"
  echo " " >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# INSTALL CRONTAB LINE IF IT DOESN'T EXIST                                                           #
#----------------------------------------------------------------------------------------------------#

if [ ! -z "$cron_cmd" ] && ! crontab -u root -l | grep -v '^ *#' | grep "$cron_cmd" &>/dev/null
then
  (crontab -u root -l ; echo "*/1 * * * * $cron_cmd") | crontab -u root -
fi

#----------------------------------------------------------------------------------------------------#
# GET YES OR NO ANSWER FROM USER                                                                     #
#----------------------------------------------------------------------------------------------------#

function get_user_answer_yn(){
  while :
  do
    read -p "$1 [y/n]: " answer
    answer="$(echo $answer | tr '[:upper:]' '[:lower:]')"
    case "$answer" in
      yes|y) return 0 ;;
      no|n) return 1 ;;
      *) echo  "Invalid Answer [yes/y/no/n expected]";continue;;
    esac
  done
}

#----------------------------------------------------------------------------------------------------#
# GET VALUE FROM THE CONFIG FILE, RETURN IT WITH THE VARIABLE "global_value"                         #
#----------------------------------------------------------------------------------------------------#

function get_config_value() {
  global_value=$(grep -v '^#' "$config_file" | grep "^$1=" | awk -F '=' '{print $2}')
  if [ -z "$global_value" ]
  then
    return 1
  else
    return 0
  fi
}

#****************************************************************************************************#
#                                   GETTING POSSIBLE MISSING VALUE                                   #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# GET PRODUCER NAME IF NOT ALREADY ON THE CONFIG FILE                                                #
#----------------------------------------------------------------------------------------------------#

if get_config_value accountname
then
  accountname="$global_value"
else
  accountname=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
  echo "accountname=$accountname" >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# GET TELEGRAM DATA IF NOT ALREADY ON THE CONFIG FILE                                                #
#----------------------------------------------------------------------------------------------------#

if get_config_value telegram_enabled
then
  if [ "$global_value" = "true" ]
  then
    telegram_enabled=true
  else
    telegram_enabled=false
  fi
else
  if get_user_answer_yn "ENABLE TELEGRAM NOTIFICATIONS"
  then
    telegram_enabled=true
    echo "telegram_enabled=true" >> "$config_file"
  else
    telegram_enabled=false
    echo "telegram_enabled=false" >> "$config_file"
    echo ""
  fi
fi
if $telegram_enabled
then
  if get_config_value telegram_token
  then
    telegram_token="$global_value"
  else
    echo ""
    read -p "ENTER YOUR TELEGRAM TOKEN API: " -e telegram_token
    echo "telegram_token=$telegram_token" >> "$config_file"
    echo ""
  fi
  if get_config_value telegram_chatid
  then
    telegram_chatid="$global_value"
  else
    read -p "ENTER YOUR TELEGRAM CHAT ID: " -e telegram_chatid
    echo "telegram_chatid=$telegram_chatid" >> "$config_file"
    echo ""
  fi
fi

#----------------------------------------------------------------------------------------------------#
# USER BLOCK MINUTE VALUE IF NOT SET IN THE CONFIG FILE                                              #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_last_block_minutes
then
  check_last_block_minutes="$global_value"
else
  read -p "ENTER MINTUES TO MONITOR IF YOU'RE NOT PRODUCING?: " -e check_last_block_minutes
  echo "check_last_block_minutes=$check_last_block_minutes" >> "$config_file"
  echo ""
fi

#****************************************************************************************************#
#                                       FUNCTIONS DEFINITIONS                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# SET TELEGRAM SEND COMMAND TO FALSE                                                                 #
#----------------------------------------------------------------------------------------------------#

send_message=false

#----------------------------------------------------------------------------------------------------#
# TRANSLATE THE TIME FORMAT FROM REMCLI FORMATE TO EPOCH TIME                                        #
#----------------------------------------------------------------------------------------------------#

function remnodelogtime_to_epoch() {
  temp_date="$( echo $1 | awk -F '.' '{ print $1}' | tr '-' '/' | tr 'T' ' ')"
  echo $(date "+%s" -d "$temp_date")
}

#----------------------------------------------------------------------------------------------------#
# MAIN PART OF THE SCRIPT                                                                            #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "/root/check_bp_monitor" ]
then
  cat << EOF > "/root/check_bp_monitor"
true
EOF
  else
    if grep "true" "/root/check_bp_monitor"
    then
      last_block_date=$(remcli -u https://testchain.remme.io get table rem rem producers -L $accountname -U $accountname | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
      last_block_epoch=$(remnodelogtime_to_epoch "$last_block_date")
      current_minutes=$(( ($now_epoch - $last_block_epoch) / 60 ))
      config_minutes_in_seconds=$(( (check_last_block_minutes * 60) - 60 ))
      if (( ($now_epoch - $last_block_epoch) >= $config_minutes_in_seconds ))
      then
        if [ ! -f "/root/bp_monitor_warning" ]
        then
          telegram_message="$accountname has stopped producing blocks for $current_minutes"
          send_message=true
          echo "1" > "/root/bp_monitor_warning"
        elif (( ($now_epoch - $last_block_epoch) >= ($config_minutes_in_seconds x 2) && grep "1" "/root/bp_monitor_warning" ))
        then
          telegram_message="$accountname has stopped producing blocks for $current_minutes"
          send_message=true
          echo "2" > "/root/bp_monitor_warning"
        elif (( ($now_epoch - $last_block_epoch) >= ($config_minutes_in_seconds x 3) && grep "2" "/root/bp_monitor_warning" ))
        then  
          telegram_message="$accountname has stopped producing blocks for $current_minutes"
          send_message=true
        fi
      fi
    fi
  fi

#----------------------------------------------------------------------------------------------------#
# SEND ALERT NOTIFICATIONS TO TELEGRAM BOT (IF THERE'S SOMETHING TO SEND)                            #
#----------------------------------------------------------------------------------------------------#

if $send_message
then
  curl -s -X POST https://api.telegram.org/bot$telegram_token/sendMessage -d chat_id=$telegram_chatid -d text="$telegram_message" &>/dev/null
fi
